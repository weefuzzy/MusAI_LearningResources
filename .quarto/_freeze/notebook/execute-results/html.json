{
  "hash": "54b1b7ddcd573e66976ba42872efa735",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---\n\n\n\n\n\n\n\n\n# Embedding Stuff {.unnumbered}\n\nA neat thing in Quarto is that we can embed code in our text files and have that execute when the site is rendered. This can be very pedagogically useful for codey stuff. Here's a sine wave \n\n::: {#4f45c63f .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np \nimport matplotlib.pyplot as plt\n\nx = np.arange(0,1,1e-2)\n\ny = np.sin(2 * np.pi * x)\n\nplt.plot(x,y)\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook_files/figure-html/cell-2-output-1.png){width=590 height=411}\n:::\n:::\n\n\nPerhaps even more powerfully, you can embed interactive code (using observable, a javascript framework). I pinched this from [here](https://observablehq.com/@haakenlid/real-time-sine-wave-plotting), just to see if it worked. \n\n\n\n\n\n\n\n\n```{ojs}\n\nPlot.plot({\n  width, // use full cell width\n  x: {grid: true, type: scale, base: '2' }, \n  y: {domain:[-1, 1], line:true, nice: true},\n  marks:[\n    Plot.ruleY([0], {strokeWidth: 0.1,}), // horizontal zero line\n    Plot[plotStyle]( // the sine wave\n      sineWave.map(([x, y])=>[x+(seconds>1?1/4:1/128), y]), \n      {r: Math.ceil(100 / sineWave.length), curve:'natural', strokeWidth: 1.5}\n    )] \n})\n\nviewof frequency = Inputs.range([1/16, 1024], {value: 1/2, label:'wave frequency (Hz)', transform: Math.log, format: numFormat()})\n\nviewof seconds = Inputs.range([1/8, 128], {value: 32, label: 'x axis seconds', transform: Math.log, format: numFormat()})\n\nviewof scale = Inputs.select([\"log\", \"linear\"], {label: \"x axis scale type\"})\n\nviewof plotStyle = Inputs.select([\"line\", \"dot\"], {label: \"plot style\"})\n\nsineWave = { // generate a sine wave array of [x, y] coordinates\n  const waveForm = (td, len) => d3.range(len).map( n => {\n    const TAU = Math.PI * 2\n    const x = (n * seconds) / (len - 1)\n    const timeStamp = (td / 1000 - x) \n    const y = Math.sin(timeStamp * TAU * frequency)\n    return [x, y]\n  })\n  const t0 = Date.now() // init time of generator\n  while (true) {\n    const timeDelta = Date.now() - t0 // ms since generator started\n    yield Promises.delay(5, waveForm(timeDelta, streamLength)) // generate value every 5 ms\n  }\n}\nstreamLength = Math.min(2**11, 2 ** Math.ceil(Math.log2((5 + seconds) * (5 + frequency)))) \n\nnumFormat = (d=3) => n => n > 2 ? Math.round(n) : n.toPrecision(d) \n\n```\n\n\n\n\n\n\n\n\nAnd then, of course, you can embed videos etc \n\n\n\n\n\n\n\n\n{{< video https://www.youtube.com/watch?v=xm3YgoEiEDc >}}\n\n",
    "supporting": [
      "notebook_files"
    ],
    "filters": [],
    "includes": {}
  }
}